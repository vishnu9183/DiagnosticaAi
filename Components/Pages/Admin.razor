@page "/Admin"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using MudBlazor
@using HealthcareApp.Models
@rendermode InteractiveServer

<!-- Optional CSS to enlarge x-axis labels -->
<style>
    .mud-chart .mud-chart-xaxis-label {
        font-size: 16px !important;
    }
</style>

<div style="display: flex; min-height: 100vh; font-family: sans-serif;">
    <!-- Sidebar -->
    <div style="
        background-color: #9EEAF9;
        width: @(sidebarCollapsed ? "60px" : "200px");
        transition: width 0.3s;
        padding: 16px;
        box-sizing: border-box;
    ">
        <!-- Collapse/Expand Button -->
        <button @onclick="ToggleSidebar" style="
            background-color: #2F3A57;
            color: white;
            border: none;
            padding: 8px;
            width: 100%;
            margin-bottom: 12px;
            cursor: pointer;
        ">
            @(!sidebarCollapsed ? "Collapse / Expand" : "â‰¡")
        </button>
        <!-- Doctors Button -->
        <button @onclick="GoToDoctors" style="
            background-color: #2F3A57;
            color: white;
            border: none;
            border-radius: 9999px;
            padding: 8px;
            width: 100%;
            margin-bottom: 12px;
            cursor: pointer;
        ">
            @(!sidebarCollapsed ? "Doctors" : "D") <MudIcon Icon="@Icons.Material.Filled.LocalHospital" Class="me-1" />
        </button>
        <!-- Patients Button -->
        <button @onclick="GoToPatients" style="
            background-color: #2F3A57;
            color: white;
            border: none;
            border-radius: 9999px;
            padding: 8px;
            width: 100%;
            cursor: pointer;
        ">
            @(!sidebarCollapsed ? "Patients" : "P") <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-1" />
        </button>
        
         @if (!sidebarCollapsed)
                                {
                                    <div class="mt-3 text-center">
                                        <!-- Replace ".jpg" with your actual file extension if needed -->
                                        <img src="Assets/admin.png" alt="Patient" class="img-fluid" style="border-radius: 12px;" />
                                    </div>
                                }
    </div>

    <!-- Main Dashboard (2 rows, 2 columns; Visual 3 spans the bottom row) -->
    <div style="
        flex: 1;
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto;
        grid-template-areas:
            'visual1 visual2'
            'visual3 visual3';
        gap: 16px;
        padding: 16px;
        box-sizing: border-box;
    ">
        <!-- Visual 1: Appointment Trends Over Time (top-left) -->
        <div style="grid-area: visual1; border: 1px solid #ccc; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 16px; background-color: #fefae0;">
            <MudText Typo="Typo.h5">Appointment Trends Over Time</MudText>
            @if (XAxisLabels != null && XAxisLabels.Length > 0 && SeriesBar != null && SeriesBar.Count > 0)
            {
                <MudChart ChartType="ChartType.Bar"
                          ChartSeries="@SeriesBar"
                          XAxisLabels="@XAxisLabels"
                          Width="100%"
                          Height="350px">
                    <CustomGraphics>
                        <!-- Optional custom styling -->
                    </CustomGraphics>
                </MudChart>
            }
            else
            {
                <MudText>Loading chart data...</MudText>
            }
        </div>

        <!-- Visual 2: Appointment Status Distribution (top-right) -->
        <div style="grid-area: visual2; border: 1px solid #ccc; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 16px; background-color: #f5ebe0;">
            <MudText Typo="Typo.h5">Appointment Status Distribution</MudText>
            @if (StatusData != null && StatusLabels != null && StatusData.Length == 3)
            {
                <MudChart ChartType="ChartType.Donut"
                          Width="300px"
                          Height="300px"
                          InputData="@StatusData"
                          InputLabels="@StatusLabels"
                          BackgroundColor="@DonutColors">
                    <CustomGraphics>
                        <text x="50%" y="40%" dominant-baseline="middle" text-anchor="middle"
                              fill="black" font-family="Helvetica" font-size="9">
                            Total
                        </text>
                        <text x="50%" y="60%" dominant-baseline="middle" text-anchor="middle"
                              fill="black" font-family="Helvetica" font-size="11">
                            @StatusData.Sum()
                        </text>
                    </CustomGraphics>
                </MudChart>
            }
            else
            {
                <MudText>Loading status data...</MudText>
            }
        </div>

        <!-- Visual 3: Doctors per Specialization (bottom row, spanning both columns) -->
        <div style="grid-area: visual3; border: 1px solid #ccc; display: flex; flex-direction: column; padding: 16px; background-color: #e0e1dd;">
            <MudText Typo="Typo.h5" Align="Align.Center">Doctors per Specialization</MudText>
            <div style="display: flex; width: 100%; gap: 16px; align-items: flex-start;">
                <!-- Bar chart for doctor specializations -->
                <div style="flex: 1;">
                    @if (DoctorSpecLabels != null && DoctorSpecLabels.Length > 0 && SeriesDoctorSpecialisation != null && SeriesDoctorSpecialisation.Count > 0)
                    {
                        <MudChart ChartType="ChartType.Bar"
                                  ChartSeries="@SeriesDoctorSpecialisation"
                                  XAxisLabels="@DoctorSpecLabels"
                                  Width="100%"
                                  Height="350px" />
                    }
                    else
                    {
                        <MudText>Loading doctor specialization data...</MudText>
                    }
                </div>

                <!-- Legend table with styled headers -->
                <div style="min-width: 180px;">
                    <MudTable Bordered="true" Hover="true" Striped="true" Items="@shortFormTable" Dense="true">
                        <HeaderContent>
                            <MudTh Style="font-weight:bold; font-size:14px;">Short Form</MudTh>
                            <MudTh Style="font-weight:bold; font-size:14px;">Full Specialization</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.SF</MudTd>
                            <MudTd>@context.Full</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool sidebarCollapsed = false;
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = default!;

    // Visual 1 (Bar Chart for Appointment Trends)
    public List<ChartSeries> SeriesBar { get; set; } = new();
    public string[] XAxisLabels { get; set; } = Array.Empty<string>();

    // Visual 2 (Donut Chart for Appointment Status)
    public double[] StatusData { get; set; } = Array.Empty<double>();
    public string[] StatusLabels { get; set; } = { "Accepted", "Pending", "Rejected" };
    public string[] DonutColors { get; set; } = { "#9EEAF9", "#48A9A6", "#2F3A57" };

    // Visual 3 (Bar Chart for Doctors per Specialization)
    public List<ChartSeries> SeriesDoctorSpecialisation { get; set; } = new();
    public string[] DoctorSpecLabels { get; set; } = Array.Empty<string>();

    // Data source for the legend table (short form mapping)
    private List<(string SF, string Full)> shortFormTable = new()
    {
        ("C",  "Cardiologist"),
        ("D",  "Dermatologist"),
        ("GP", "General Practitioner"),
        ("N",  "Neurologist")
    };

    // Data sources from API
    private List<Appointment> allAppointments = new();
    private List<Doctor> allDoctors = new();

    private void ToggleSidebar() => sidebarCollapsed = !sidebarCollapsed;
    private void GoToDoctors() => Nav.NavigateTo("/doctors");
    private void GoToPatients() => Nav.NavigateTo("/patients");

    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");

        // Fetch all appointments
        allAppointments = await httpClient.GetFromJsonAsync<List<Appointment>>("appointments")
                        ?? new List<Appointment>();

        // Fetch all approved doctors
        allDoctors = await httpClient.GetFromJsonAsync<List<Doctor>>("doctors")
                        ?? new List<Doctor>();

        Console.WriteLine($"Total appointments fetched: {allAppointments.Count}");
        Console.WriteLine($"Total doctors fetched: {allDoctors.Count}");

        // Load Visual 1
        LoadAppointmentTrends();

        // Load Visual 2
        LoadAppointmentStatus();

        // Load Visual 3
        LoadDoctorsPerSpecialisation();
    }

    private void LoadAppointmentTrends()
    {
        var now = DateTime.Now;
        var startMonth = new DateTime(now.Year, now.Month, 1);
        var months = Enumerable.Range(0, 7).Select(i => startMonth.AddMonths(i)).ToList();

        var data = months.Select(m =>
        {
            var nextMonth = m.AddMonths(1);
            return (double)allAppointments.Count(a => a.AppointmentDateTime >= m && a.AppointmentDateTime < nextMonth);
        }).ToArray();

        // Use short labels like "Apr (5)" instead of full month/year
        XAxisLabels = months.Select((m, i) => $"{m:MMM} ({data[i]})").ToArray();

        SeriesBar = new List<ChartSeries>
        {
            new ChartSeries { Name = "Appointments", Data = data }
        };

        Console.WriteLine("Appointment Trends Data:");
        for (int i = 0; i < XAxisLabels.Length; i++)
        {
            Console.WriteLine($"Label: {XAxisLabels[i]}, Count: {data[i]}");
        }
    }

    private void LoadAppointmentStatus()
    {
        var acceptedCount = allAppointments.Count(a =>
            a.Status?.Equals("Accepted", StringComparison.OrdinalIgnoreCase) == true);

        var pendingCount = allAppointments.Count(a =>
            a.Status?.Equals("Pending", StringComparison.OrdinalIgnoreCase) == true ||
            a.Status?.Equals("Scheduled", StringComparison.OrdinalIgnoreCase) == true);

        var rejectedCount = allAppointments.Count(a =>
            a.Status?.Equals("Rejected", StringComparison.OrdinalIgnoreCase) == true);

        StatusData = new double[] { acceptedCount, pendingCount, rejectedCount };

        Console.WriteLine($"Appointment Status: Accepted: {acceptedCount}, Pending: {pendingCount}, Rejected: {rejectedCount}");
    }

    private void LoadDoctorsPerSpecialisation()
    {
        // Group all approved doctors by their Specialization
        var grouped = allDoctors
            .GroupBy(d => d.Specialization)
            .Select(g => new
            {
                Specialization = g.Key,
                Count = g.Count()
            })
            .OrderBy(x => x.Specialization)
            .ToList();

        var data = grouped.Select(x => (double)x.Count).ToArray();

        // Format labels with short form from the table, fallback to first letter if no match
        DoctorSpecLabels = grouped.Select((x, i) =>
        {
            var match = shortFormTable.FirstOrDefault(sf => sf.Full.Equals(x.Specialization, StringComparison.OrdinalIgnoreCase));
            var shortForm = !string.IsNullOrEmpty(match.SF) ? match.SF : x.Specialization.Substring(0, 1).ToUpper();
            return $"{shortForm} ({data[i]})";
        }).ToArray();

        SeriesDoctorSpecialisation = new List<ChartSeries>
        {
            new ChartSeries { Name = "Doctors", Data = data }
        };

        Console.WriteLine("Doctors per Specialization:");
        foreach (var item in grouped)
        {
            Console.WriteLine($"Specialization: {item.Specialization}, Count: {item.Count}");
        }
    }
}
