@page "/patients/{PatientId:int}/appointments/{AppointmentId:int}"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="alert alert-info">Loading appointment details...</div>
}
else if (hasError)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (appointment == null)
{
    <div class="alert alert-warning">Appointment not found.</div>
}
else
{
    <!-- Main container with top margin -->
    <div class="container my-4">
        <h2>Appointment Details<MudIcon Icon="@Icons.Material.Filled.Notes" Class="me-1" /></h2>

        <p><strong>Appointment ID:</strong> @appointment.AppointmentId</p>
        <p>
            <strong>Doctor:</strong>
            @($"{appointment.Doctor?.FirstName} {appointment.Doctor?.LastName}")
        </p>
        <p>
            <strong>Date/Time:</strong>
            @appointment.AppointmentDateTime.ToLocalTime().ToString("g")
        </p>
        <p><strong>Status:</strong> @appointment.Status</p>
        
        @if (appointment.Status == "Rejected")
        {
            <div class="alert alert-danger">
                This appointment has been rejected. No further actions are allowed.
            </div>
        }
        else
        {
            <!-- AI Analysis (read-only) -->
            <div class="card my-3 shadow-sm ai-analysis" style="border-radius: 12px;">
                <div class="card-body">
                    <h5 class="card-title">AI Analysis for report <MudIcon Icon="@Icons.Material.Filled.AutoGraph" Class="me-1" /></h5>
                    <p>
                        @(string.IsNullOrWhiteSpace(appointment.AiOutput)
                            ? "No AI analysis available."
                            : appointment.AiOutput)
                    </p>
                    <!-- Button to navigate to the AI report generation page -->
                    <button class="btn btn-secondary" @onclick="NavigatetoAi">
                        Generate AI Analysis for report 
                    </button>
                </div>
            </div>

            <!-- Patient Notes Section (editable) -->
            <div class="card my-3 shadow-sm my-notes" style="border-radius: 12px;">
                <div class="card-body">
                    <h5 class="card-title">My Notes <MudIcon Icon="@Icons.Material.Filled.Note" Class="me-1" /></h5>
                    <textarea class="form-control mb-2" @bind="appointment.PatientNotes" rows="4"></textarea>
                    <button class="btn btn-primary" @onclick="SavePatientNotes">
                        Save My Notes <MudIcon Icon="@Icons.Material.Filled.SaveAs" Class="me-1" />
                    </button>
                </div>
            </div>

            <!-- Doctor's Notes Section (read-only) -->
            <div class="card my-3 shadow-sm doc-notes" style="border-radius: 12px;">
                <div class="card-body">
                    <h5 class="card-title">Doctor's Notes <MudIcon Icon="@Icons.Material.Filled.LocalHospital" Class="me-1" /></h5>
                    <p>
                        @(string.IsNullOrWhiteSpace(appointment.DoctorNotes)
                            ? "No notes from the doctor yet."
                            : appointment.DoctorNotes)
                    </p>
                </div>
            </div>
        }
    </div>
}

<!-- Hovering Snackbar for Success Message -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success"
         style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 999;">
        @successMessage
    </div>
}

@code {
    [Parameter] public int PatientId { get; set; }
    [Parameter] public int AppointmentId { get; set; }

    private Appointment appointment;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            appointment = await client.GetFromJsonAsync<Appointment>($"appointments/{AppointmentId}");
            if (appointment == null)
            {
                hasError = true;
                errorMessage = "Appointment not found.";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SavePatientNotes()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var payload = new NotesDto { Notes = appointment.PatientNotes };
            var response = await client.PutAsJsonAsync($"appointments/{AppointmentId}/patientnotes", payload);
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Failed to save my notes.";
            }
            else
            {
                successMessage = "Your notes have been saved successfully!";
                _ = Task.Run(async () =>
                {
                    await Task.Delay(60000); // 1 minute delay
                    successMessage = "";
                    await InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void NavigatetoAi()
    {
        NavigationManager.NavigateTo($"/fileupload/{AppointmentId}");
    }

    // Helper DTO for notes update
    private class NotesDto
    {
        public string Notes { get; set; }
    }

    // Simplified Appointment model for this page
    private class Appointment
    {
        public int AppointmentId { get; set; }
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
        public DateTime AppointmentDateTime { get; set; }
        public string Status { get; set; }
        public string PatientNotes { get; set; }
        public string DoctorNotes { get; set; }
        public string AiOutput { get; set; }
        public Doctor Doctor { get; set; }
    }

    private class Doctor
    {
        public int DoctorId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }
}

<style>
/* Entire page background #caf0f8 */
body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background-color: #caf0f8;
    display: flex;
    flex-direction: column;
}

/* If you want a pinned footer, use similar approach from your other pages.
   For now, just let .container fill. */
:global(.container), :global(.container-fluid), :global(.my-4) {
    flex: 1;
}

/* AI Analysis => pastel green (#d1e7dd), like "Predicted Disease" style */
.ai-analysis {
    background-color: #d1e7dd;
}

/* Patient Notes => pastel from the "patient notes" vibe (#e9edc9) */
.my-notes {
    background-color: #e9edc9;
}

/* Doctor's Notes => pastel "appointment" color (#ccd5ae) */
.doc-notes {
    background-color: #ccd5ae;
}

/* Common card styling (already set inline: border-radius, shadow, margin) can go here if you want. */
.ai-analysis,
.my-notes,
.doc-notes {
    border-radius: 12px;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
    margin-bottom: 1rem;
}
</style>
