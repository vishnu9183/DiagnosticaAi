@page "/patients/{PatientId:int}"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using HealthcareApp.Models
@inject IHttpClientFactory HttpClientFactory
@inject HealthcareApp.Services.VertexAiChatService AiChatService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="patient-page container-fluid">
    <div class="row">
        <!-- [A] SIDEBAR COLUMN -->
        <div class="@($"{(isSidebarCollapsed ? "col-md-1" : "col-md-3")} sidebar p-3")">
            
            <!-- Toggle Button -->
            <button class="toggle-btn mb-3 w-100 text-start"
                    @onclick="ToggleSidebar">
                @(!isSidebarCollapsed ? "< Collapse" : "> Expand")
            </button>

            <h4 class="mb-3" style="@($"{(isSidebarCollapsed ? "display:none;" : "")}")">
                Navigation
            </h4>

            <button class="btn btn-primary mb-2 w-100 text-start" 
                    @onclick="GoToProfile"
                    style="@($"{(isSidebarCollapsed ? "display:none;" : "")}")">
                <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-1" />
                My Profile
            </button>
            
            <button class="btn btn-primary mb-2 w-100 text-start"
                    @onclick="GoToAppointments"
                    style="@($"{(isSidebarCollapsed ? "display:none;" : "")}")">
                <MudIcon Icon="@Icons.Material.Filled.Margin" Class="me-1" />
                My Appointments
            </button>
            
              <!-- Image section (only visible if sidebar is expanded) -->
                        @if (!isSidebarCollapsed)
                        {
                            <div class="mt-3 text-center">
                                <!-- Replace ".jpg" with your actual file extension if needed -->
                                <img src="Assets/patient1.jpg" alt="Patient" class="img-fluid" style="border-radius: 12px;" />
                            </div>
                        }
        </div>

        <!-- [B] MAIN CONTENT COLUMN -->
        <div class="@($"{(isSidebarCollapsed ? "col-md-11" : "col-md-9")} d-flex flex-column main-content p-0")">

            <!-- Symptom Checker Card -->
            <div class="translucent-card flex-fill d-flex flex-column p-4">
                <h4 class="card-title">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="me-1" />
                    Symptom Checker
                </h4>
                
                @if (isLLMLoading)
                {
                    <p class="text-info">Checking symptoms...</p>
                }
                else if (llmHasError)
                {
                    <div class="alert alert-danger">@llmErrorMessage</div>
                }

                <EditForm Model="@inputModel" OnValidSubmit="OnSubmitSymptoms">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label for="userInput" class="form-label">
                            Enter your symptoms to predict the disease:
                        </label>
                        <InputText id="userInput" class="form-control" @bind-Value="inputModel.UserText" />
                    </div>
                    
                    <button type="submit" class="btn btn-success">Submit</button>
                </EditForm>

                @if (!string.IsNullOrEmpty(diagnosisResult))
                {
                    <div class="alert alert-success mt-3">
                        <div class="mb-2">
                            <strong><MudIcon Icon="@Icons.Material.TwoTone.OnlinePrediction" Class="me-1"/>Predicted Disease:</strong> @result[0]
                        </div>
                        <div class="mb-2">
                            <strong><MudIcon Icon="@Icons.Material.TwoTone.Description" Class="me-1"/>Disease Description:</strong> @result[1]
                        </div>
                        <div class="mb-2">
                        <strong><MudIcon Icon="@Icons.Material.Filled.DoNotDisturbOnTotalSilence" Class="me-1"/>Precautions:</strong> @result[2]
                        </div>
                    </div>
                }

                @if (doctors != null && doctors.Any())
                {
                    <div class="doctor-recommendation">
                        <strong>Recommended Doctors:</strong>
                        <ul>
                            @foreach (var doctor in doctors)
                            {
                                <!-- Use a flex row so the button doesnâ€™t overlap -->
                                <li class="d-flex align-items-center justify-content-between" style="margin-bottom: 0.5rem;">
                                    <div>
                                        <MudIcon Icon="@Icons.Material.Filled.LocalHospital" Class="me-1" />
                                        @doctor.FirstName @doctor.LastName - @doctor.Specialization
                                        (Email: @doctor.Email, Phone: @doctor.PhoneNumber)
                                    </div>
                                    <button class="btn btn-success"
                                            @onclick="@(() => ShowAppointmentModal(doctor.DoctorId))">
                                        Schedule Appointment
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if (showAppointmentModal)
                {
                    <div class="appointment">
                        <h5> <MudIcon Icon="@Icons.Material.TwoTone.DateRange" Class="me-1" />Choose an Appointment Date/Time </h5>
                        <input type="datetime-local" @bind="appointmentDateTime" min="@minDateTime"/>
                        <button class="btn btn-success ml-2" @onclick="ConfirmAppointment">Confirm</button>
                        <button class="btn btn-secondary ml-2" @onclick="CancelAppointment">Cancel</button>
                    </div>
                }

                <!-- Success Snackbar -->
                @if (showSuccessSnackbar)
                {
                    <div class="alert alert-success" 
                         style="position: fixed; top: 20px; left: 50%; 
                                transform: translateX(-50%); z-index: 999;">
                        Appointment scheduled successfully!
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Page-Specific CSS -->
<style>
    /* Keep the same soothing gradient background */
    body {
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #CDE0F7, #F5F5F5) !important;
        background-attachment: fixed;
        background-size: cover;
    }

    /* Collapsible Sidebar */
    .sidebar {
        background-color: #90e0ef;
        border-right: 1px solid #ddd;
        border-radius: 0 12px 12px 0;
        box-shadow: 2px 0 4px rgba(0,0,0,0.1);
        min-height: 100vh;
        transition: width 0.3s ease;
    }

    /* Toggle Button for the Sidebar */
    .toggle-btn {
        background-color: #2F3B52;
        color: #fff;
        border: none;
        border-radius: 30px;
        transition: background-color 0.2s ease;
    }
    .toggle-btn:hover {
        background-color: #24324A; 
    }

    /* Main content uses flex layout for vertical expansion */
    .main-content {
        min-height: 100vh;
        transition: width 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    /* Translucent card with pastel pink background */
    .translucent-card {
        background-color: #caf0f8;
        border-radius: 12px;
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
    }

    .translucent-card.flex-fill {
        display: flex;
        flex-direction: column;
    }

    /* Card title style */
    .translucent-card .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2F3B52;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
    }

    /* Example primary button style */
    .btn-primary {
        border-radius: 30px;
        background-color: #2F3B52;
        border: none;
    }

    .schedule {
        border-radius: 30px;
        background-color: #a7c957;
        border: none;
    }

    .doctor-recommendation {
        border-radius: 12px;
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
        background-color: #e9edc9;
        margin-bottom: 1rem;
        padding: 1rem;
    }

    .appointment {
        border-radius: 12px;
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
        background-color: #ccd5ae;
        margin-bottom: 1rem;
        padding: 1rem;
    }
</style>

@code {
    private bool isSidebarCollapsed = false;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private bool isLLMLoading = false;
    private bool llmHasError = false;
    private string llmErrorMessage;
    private string diagnosisResult;
    private string[] result;
    private List<Doctor> doctors;
    private bool showAppointmentModal = false;
    private int selectedDoctorId;
    private DateTime? appointmentDateTime; 
    [Parameter] public int PatientId { get; set; }
    private bool showSuccessSnackbar = false;

    private InputModel inputModel = new InputModel();
    private string minDateTime => DateTime.Now.ToString("yyyy-MM-ddTHH:mm");

    protected override async Task OnInitializedAsync()
    {
        // Initialize data here if needed
        isLoading = false;
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
    }

    private async Task OnSubmitSymptoms()
    {
        isLLMLoading = true;
        llmHasError = false;
        diagnosisResult = "";
        doctors = null;

        try
        {
            Console.WriteLine($"User Symptoms: {inputModel.UserText}");

            string prompt = $"A patient reports these symptoms: {inputModel.UserText}. " +
                            "Provide a response in this exact format: " +
                            "\"You probably have [Disease] nand [Description] nand  you should [Precautions].nand [type of doctor] \" " +
                            "Replace the placeholders with a specific disease name, a brief description, and actionable precautions and the type of doctor to be consulted, do not give any alternate types for single , only singly type";

            diagnosisResult = await AiChatService.GetDiagnosisAsync(prompt);
            result = diagnosisResult.Split("nand");

            if (result.Length >= 4)
            {
                var doctorType = result[3].Trim();
                var httpClient = HttpClientFactory.CreateClient("ApiClient");
                doctors = await httpClient.GetFromJsonAsync<List<Doctor>>($"doctors/specialty/{doctorType}");
            }
            else
            {
                llmHasError = true;
                llmErrorMessage = "Diagnosis format is invalid.";
            }

            inputModel.UserText = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            llmHasError = true;
            llmErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLLMLoading = false;
        }
    }

    private void ShowAppointmentModal(int doctorId)
    {
        selectedDoctorId = doctorId;
        showAppointmentModal = true;
        StateHasChanged();
    }

    private async Task ConfirmAppointment()
    {
        if (appointmentDateTime == null)
        {
            return;
        }
        var localDateTime = appointmentDateTime.Value;
        var utcDateTime = DateTime.SpecifyKind(localDateTime, DateTimeKind.Utc);

        var newAppointment = new Appointment
        {
            PatientId = PatientId,
            DoctorId = selectedDoctorId,
            AppointmentDateTime = utcDateTime,
            Status = "Pending",
            Notes = "Appointment Scheduled via symptom checker"
        };

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PostAsJsonAsync("appointments", newAppointment);

        if (!response.IsSuccessStatusCode)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            llmHasError = true;
            llmErrorMessage = $"Failed to schedule appointment: {errorContent}";
            showAppointmentModal = false;
            StateHasChanged();
            return;
        }

        showAppointmentModal = false;
        appointmentDateTime = null;
        
        showSuccessSnackbar = true;
        StateHasChanged();

        // Hide after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            showSuccessSnackbar = false;
            await InvokeAsync(StateHasChanged);
        });

        StateHasChanged();
    }

    private void CancelAppointment()
    {
        showAppointmentModal = false;
        appointmentDateTime = null;
        StateHasChanged();
    }

    private void GoToProfile()
    {
        NavigationManager.NavigateTo($"/patients/{PatientId}/profile");
    }

    private void GoToAppointments()
    {
        NavigationManager.NavigateTo($"/patients/{PatientId}/appointments");
    }

    private class InputModel
    {
        public string UserText { get; set; } = "";
    }

    private class Appointment
    {
        public int AppointmentId { get; set; }
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
        public DateTime AppointmentDateTime { get; set; }
        public string Status { get; set; }
        public string Notes { get; set; }
    }

    private class Doctor
    {
        public int DoctorId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Specialization { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
    }
}
