@page "/fileupload/{AppointmentId:int}"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@using System.Text.Json
@rendermode InteractiveServer

<!-- Centered container for the upload card -->
<div class="main-container d-flex align-items-center justify-content-center">
    <div class="card upload-card">
        <div class="card-body">
            <h3 class="card-title">Upload an Image for AI Analysis <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Class="me-1" /></h3>
            <p class="card-text text-muted">
                Please select an image file to analyze. <MudIcon Icon="@Icons.Material.Filled.BackHand" Class="me-1" />
            </p>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            @if (isAnalyzing)
            {
                <div class="alert alert-info">Analyzing the image... <MudIcon Icon="@Icons.Material.Filled.SyncLock" Class="me-1" /></div>
            }

            <InputFile OnChange="HandleFileSelected" />
            <button class="btn-primary mt-3" @onclick="AnalyzeFile" disabled="@(!fileSelected)">
                Upload & Analyze <MudIcon Icon="@Icons.Material.Filled.Upload" Class="me-1" />
            </button>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success"
                     style="position: fixed; top: 20px; left: 50%; 
                             transform: translateX(-50%); z-index: 999;">
                    @successMessage
                </div>
            }
            
            @if (!string.IsNullOrEmpty(aiOutput))
            {
                <div class="mt-3">
                    <h5>Latest AI Output <MudIcon Icon="@Icons.Material.Filled.Bolt" Class="me-1" /></h5>
                    <p>@aiOutput</p>
                </div>
            }
        </div>
    </div>
    
</div>
<div class="icon-row text-center my-4">
        <img src="Assets/ai1.png" alt="AI Icon 1" class="round-icon me-3" />
        <img src="Assets/ai2.png" alt="AI Icon 2" class="round-icon me-3" />
        <img src="Assets/ai3.png" alt="AI Icon 3" class="round-icon" />
    </div>

@code {
    [Parameter] public int AppointmentId { get; set; }
    
    private bool fileSelected = false;
    private bool isAnalyzing = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string aiOutput = "";
    private IBrowserFile selectedFile;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            selectedFile = e.File;
            fileSelected = true;
            errorMessage = "";
            successMessage = "";
            aiOutput = "";
        }
    }

    private async Task AnalyzeFile()
    {
        try
        {
            if (selectedFile == null)
            {
                errorMessage = "No file selected.";
                return;
            }

            isAnalyzing = true;
            errorMessage = "";
            successMessage = "";
            aiOutput = "";

            // Read the file and convert to Base64.
            using var ms = new MemoryStream();
            await selectedFile.OpenReadStream().CopyToAsync(ms);
            var fileBytes = ms.ToArray();
            string base64File = Convert.ToBase64String(fileBytes);

            // Call your Python API endpoint to analyze the image.
            var aiResult = await PythonAnalyzeAsync(base64File);

            // Combine the file name and AI output in "file name - AI Notes" format.
            string combinedResult = $"{selectedFile.Name} - {aiResult}";

            // Update the appointment's AI output via your API.
            var client = HttpClientFactory.CreateClient("ApiClient");
            var payload = new NotesDto { Notes = combinedResult };
            var response = await client.PutAsJsonAsync($"appointments/{AppointmentId}/aioutput", payload);
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Failed to update AI output.";
            }
            else
            {
                successMessage = "AI output updated successfully!";
                aiOutput = combinedResult;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isAnalyzing = false;
            fileSelected = false;
        }
    }

    private async Task<string> PythonAnalyzeAsync(string base64File)
    {
        // Create an HttpClient (adjust URL if needed)
        var client = HttpClientFactory.CreateClient();
        var payload = new { file = base64File };
        var response = await client.PostAsJsonAsync("http://127.0.0.1:5001/analyzeFile", payload);
        response.EnsureSuccessStatusCode();
        var jsonResponse = await response.Content.ReadAsStringAsync();

        using var doc = JsonDocument.Parse(jsonResponse);
        var root = doc.RootElement;
        if (root.TryGetProperty("result", out var resultProp))
        {
            return resultProp.GetString();
        }
        else if (root.TryGetProperty("error", out var errorProp))
        {
            return $"Error: {errorProp.GetString()}";
        }
        return "No AI output.";
    }

    private class NotesDto
    {
        public string Notes { get; set; }
    }
}

<style>
/* 1) Entire page background #caf0f8, pinned footer approach. */
body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background-color: #caf0f8;
    display: flex;
    flex-direction: column;
}

/* 2) Main container => fill available space, 
      center the card horizontally and vertically,
      add some bottom margin so the card isnâ€™t too close to the footer. */
.main-container {
    flex: 1; 
    display: flex; 
    align-items: center; 
    justify-content: center;
    margin-top: 2rem; 
    margin-bottom: 2rem;
}

/* 3) Upload card => background #90e0ef */
.upload-card {
    background-color: #90e0ef;
    border-radius: 12px;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
    width: 400px; /* you can adjust the width as you like */
}
.btn-primary {
        border-radius: 30px;
        background-color: #2F3B52;
        border: none;
    }
    
      /* Icon row styling */
        .icon-row {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 80px;
            margin-bottom: 2rem;
        }
    
        .round-icon {
            width: 200px;
            height: 200px;
            object-fit: cover;
           
        }

</style>
